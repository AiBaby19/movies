{"version":3,"sources":["search/SearchBar.jsx","menuBar/MenuBar.jsx","modal/Modal.jsx","movies/singleMovie.jsx","movies/MovieList.jsx","home/Home.jsx","popUp/QuestionPopUp.jsx","popUp/AlertPopUp.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","movieTitle","getMovieData","_callee","searchQuery","data","regenerator_default","a","wrap","_context","prev","next","_this","Axios","get","concat","then","res","Search","props","renderMovieList","catch","err","console","log","stop","this","_this2","react_default","createElement","className","type","placeholder","onChange","e","setState","currentTarget","value","onClick","Component","MenuBar","Fragment","id","Modal","renderMovieInfo","editedText","movieInModal","Object","keys","map","key","imdbID","Poster","style","textTransform","cleanUpEditedText","verifiedText","replace","toLowerCase","split","letter","charAt","toUpperCase","substring","join","prevState","objectSpread","defineProperty","verifyEditedInfo","cleanText","match","toggleAlert","Date","getFullYear","findDuplicateTitle","setTimeout","tempMovieList","movieList","i","length","togglePopUp","_this3","movie","toggleModal","src","alt","Title","height","width","movies_singleMovie","poster","title","maxHeight","MovieList","_ref","Home","fullMovieInfo","QuestionPopUp","fontWeight","saveOrDelete","deleteMovie","saveEditedInfo","AlertPopUp","alertType","App","isModalOpen","isPopUpOpen","saveOrDeletePopUp","isAlert","deleteIdOrVerifiedInfo","movieID","getFullMovieInfo","fetchFirstList","deleteDuplicatesImdb","arr","filter","candidate","find","item","b","getMovieIndex","findIndex","deleteId","movieListCopy","toConsumableArray","movieIndex","splice","approvedTextInfo","_callee2","_context2","abrupt","Year","RunTime","Runtime","Genre","Director","menuBar_MenuBar","search_SearchBar","modal_Modal","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wbAuCeA,oNAhCXC,MAAQ,CACJC,WAAY,MAGhBC,kCAAe,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACLP,EAAcQ,EAAKZ,MAAMC,WAC3BI,EAAO,GAFAI,EAAAE,KAAA,EAGLE,IACDC,IADC,8CAAAC,OACiDX,IAClDY,KAAK,SAAAC,GACFZ,EAAOY,EAAIZ,KAAKa,OAChBN,EAAKO,MAAMC,gBAAgBf,KAE9BgB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,KATnB,wBAAAb,EAAAgB,SAAAtB,EAAAuB,iFAYN,IAAAC,EAAAD,KAEL,OADAH,QAAQC,IAAIE,KAAK1B,MAAMC,YAEf2B,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,aACXF,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,WACXF,EAAArB,EAAAsB,cAAA,SAAOC,UAAU,cAAcC,KAAK,OAAOC,YAAY,oBAAoBC,SAAU,SAACC,GAAD,OAAMP,EAAKQ,SAAS,CAAElC,WAAYiC,EAAEE,cAAcC,WACvIT,EAAArB,EAAAsB,cAAA,UAAQC,UAAU,MAAMQ,QAAS,kBAAMX,EAAKzB,iBAA5C,mBAvBAqC,cCkBTC,oNAnBbxC,MAAQ,2EAEN,OACE4B,EAAArB,EAAAsB,cAACD,EAAArB,EAAMkC,SAAP,KACEb,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,iBAAiBY,GAAG,WACjCd,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,QAAf,QACAF,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,gBACfF,EAAArB,EAAAsB,cAAA,MAAIC,UAAU,UACZF,EAAArB,EAAAsB,cAAA,kBACAD,EAAArB,EAAAsB,cAAA,uBACAD,EAAArB,EAAAsB,cAAA,gCAXUU,8BCmJPI,oNAlJX3C,MAAQ,KAWR4C,gBAAkB,WACd,IAAIC,EAAa,GAEjB,OADAtB,QAAQC,IAAIZ,EAAKO,MAAM2B,cAChBC,OACFC,KAAKpC,EAAKO,MAAM2B,cAChBG,IAAI,SAAAC,GACD,MAAY,WAARA,GAA4B,WAARA,OACpB,GAEAL,EAAWK,GAAOtC,EAAKO,MAAM2B,aAAaI,GAG1CL,EAAWM,OAASvC,EAAKO,MAAM2B,aAAaK,OAC5CN,EAAWO,OAASxC,EAAKO,MAAM2B,aAAaM,OAGxCxB,EAAArB,EAAAsB,cAAA,OAAKqB,IAAKA,EAAKpB,UAAU,cACrBF,EAAArB,EAAAsB,cAAA,KACIwB,MAAO,CACPC,cAAe,cACfJ,GAJR,KAImBtC,EAAKZ,MAAMkD,GACpBtC,EAAKZ,MAAMkD,GACXtC,EAAKO,MAAM2B,aAAaI,GAC9BtB,EAAArB,EAAAsB,cAAA,SACIE,KAAK,OACLW,GAAG,SACHV,YAAW,QAAAjB,OAAUmC,GACrBjB,SAAU,SAACC,GAAD,OAAOtB,EAAK2C,kBAAkBrB,EAAGW,EAAYK,aAQnFK,kBAAoB,SAACrB,EAAGW,EAAYK,GAChC,GAAY,WAARA,GAA4B,WAARA,GAA4B,SAARA,EAAgB,CACxD,IAAIM,EAAetB,EACdE,cACAC,MACAoB,QAAQ,eAAgB,KACxBC,cACAC,MAAM,KACNV,IAAI,SAACW,GAAD,OAAYA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,UAAU,KAClEC,KAAK,KAEVnB,EAAWK,GAAOM,GAAgBX,EAAWK,GAGjDtC,EAAKuB,SAAS,SAAC8B,GAAD,OAAAlB,OAAAmB,EAAA,EAAAnB,CAACA,OAAAoB,EAAA,EAAApB,CAAA,GACVG,EAAML,EAAWK,IACfe,EAAUjE,YAIrBoE,iBAAmB,WACf,IAAMC,EAAStB,OAAAmB,EAAA,EAAAnB,CAAA,GACRnC,EAAKZ,OAGZ,IAAK,IAAIqC,KAASgC,EAAW,CACzB,GAAIA,EAAUhC,GAAOiC,MAAM,SAIvB,YAHA1D,EACKO,MACAoD,YAAY,mCAIrB,GAAc,SAAVlC,EAAkB,CAClB,GAAIgC,EAAUhC,IAAS,IAAImC,MAAOC,eAAiBJ,EAAUhC,GAAS,KAIlE,YAHAzB,EACKO,MACAoD,YAAY,qCAIrB,GAAIF,EAAUhC,GAAOiC,MAAM,aAIvB,YAHA1D,EACKO,MACAoD,YAAY,8BAK7B3D,EAAK8D,yGA7FW,IAAA/C,EAAAD,KAChBiD,WAAW,WACPhD,EAAKQ,SAALY,OAAAmB,EAAA,EAAAnB,CAAA,GACOpB,EAAKR,MAAM2B,gBAEnB,kDA8FH,IAFA,IAAI8B,EAAgBlD,KAAKP,MAAM0D,UAEtBC,EAAI,EAAGA,EAAIF,EAAcG,OAAQD,IACtC,GAAIpD,KAAK1B,MAAL,SAAyB4E,EAAc,GAAd,QAA8BlD,KAAK1B,MAAL,QAAwB4E,EAAc,GAAd,MAI/E,YAHAlD,KACKP,MACAoD,YAAY,6CAKzB7C,KACKP,MACA6D,YAAYtD,KAAK1B,MAAO,yCAKxB,IAAAiF,EAAAvD,KACCwD,EAAQxD,KAAKP,MAAM2B,aAEzB,OACIlB,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,aACXF,EAAArB,EAAAsB,cAAA,UAAQC,UAAU,WAAWQ,QAAS,kBAAM2C,EAAK9D,MAAMgE,gBAAvD,KAEAvD,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,eACXF,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,mBACXF,EAAArB,EAAAsB,cAAA,WACID,EAAArB,EAAAsB,cAAA,oBADJ,KACqBqD,EAAM/B,QAE1BzB,KAAKkB,mBAGVhB,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,eACXF,EAAArB,EAAAsB,cAAA,OAAKuD,IAAKF,EAAM9B,OAAQiC,IAAKH,EAAMI,MAAOC,OAAO,MAAMC,MAAM,UAIrE5D,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,iBACXF,EAAArB,EAAAsB,cAAA,UAAQC,UAAU,MAAMQ,QAAS,kBAAM2C,EAAKb,qBAA5C,QACAxC,EAAArB,EAAAsB,cAAA,UAAQC,UAAU,iBAAiBQ,QAAS,kBAAM2C,EAAK9D,MAAMgE,gBAA7D,mBA7IA5C,cCANkD,SAAA,SAACtE,GACX,OACIS,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,aACXF,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,aACXF,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,WACdP,QAAQC,IAAIL,EAAMuE,QACf9D,EAAArB,EAAAsB,cAAA,OACIuD,IAAKjE,EAAMuE,OACXL,IAAKlE,EAAMwE,MACXtC,MAAO,CACPmC,MAAO,QACPI,UAAW,YAInBhE,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,gBACXF,EAAArB,EAAAsB,cAAA,UAAQC,UAAU,YAAYQ,QAAS,kBAAMnB,EAAM6D,YAAY7D,EAAMgC,OAAQ,YAA7E,MAQJvB,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,gBACXF,EAAArB,EAAAsB,cAAA,UAAQC,UAAU,WAAWQ,QAAS,kBAAMnB,EAAMgE,YAAYhE,EAAMgC,UAApE,UAORvB,EAAArB,EAAAsB,cAAA,UAAKV,EAAMwE,UC/BTE,SAAA,SAAC1E,GAgBX,OACIS,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,eAdRX,EACF0D,UACA5B,IAAI,SAAA6C,GAA6B,IAA3BR,EAA2BQ,EAA3BR,MAAOlC,EAAoB0C,EAApB1C,OAAQD,EAAY2C,EAAZ3C,OAClB,OAAQvB,EAAArB,EAAAsB,cAAC4D,EAAD,CACJvC,IAAKC,EACL6B,YAAa7D,EAAM6D,YACnBG,YAAahE,EAAMgE,YACnBhC,OAAQA,EACRwC,MAAOL,EACPI,OAAmB,QAAXtC,EAAmB,2BAA4BA,SCZ7D2C,SAAA,SAAC5E,GACX,OAEIS,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,kBACXF,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,WACXF,EAAArB,EAAAsB,cAAA,MAAIC,UAAU,iBAAd,gBACAF,EAAArB,EAAAsB,cAACgE,EAAD,CACIV,YAAahE,EAAMgE,YACnBN,UAAW1D,EAAM0D,UACjBG,YAAa7D,EAAM6D,YACnBgB,cAAe7E,EAAM6E,oBCX3BC,SAAA,SAAC9E,GAWX,OACIS,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,aACXF,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,mBACXF,EAAArB,EAAAsB,cAAA,oCACID,EAAArB,EAAAsB,cAAA,YACID,EAAArB,EAAAsB,cAAA,KACIwB,MAAO,CACP6C,WAAY,QAFhB,IAGK/E,EAAMgF,aAHX,MAFR,eAQAvE,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,WACXF,EAAArB,EAAAsB,cAAA,UAAQC,UAAU,MAAMQ,QAAS,iBApBlB,WAAvBnB,EAAMgF,cACNhF,EAAMiF,mBAEiB,SAAvBjF,EAAMgF,cACNhF,EAAMkF,oBAgBE,WACAzE,EAAArB,EAAAsB,cAAA,UAAQC,UAAU,iBAAiBQ,QAAS,kBAAMnB,EAAM6D,gBAAxD,eCxBNsB,EAAA,SAACnF,GACX,OACIS,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,aACXF,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,gBAAf,UACAF,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,mCACXF,EAAArB,EAAAsB,cAAA,SAAIV,EAAMoF,WACV3E,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,WACXF,EAAArB,EAAAsB,cAAA,UAAQC,UAAU,gBAAgBQ,QAAS,kBAAMnB,EAAMoD,gBAAvD,UC6KLiC,oNA3KXxG,MAAQ,CACJ6E,UAAW,GACX4B,aAAa,EACbC,aAAa,EACb5D,aAAc,GACd6D,kBAAmB,KACnBC,SAAS,EACTC,uBAAwB,GACxBN,UAAW,MAQfpB,YAAc,SAAC2B,GACXlG,EAAKuB,SAAS,CACVsE,aAAc7F,EAAKZ,MAAMyG,aAC1B,kBAAM7F,EAAKmG,iBAAiBD,QAInCvC,YAAc,SAACgC,GACX3F,EAAKuB,SAAS,CACVyE,SAAUhG,EAAKZ,MAAM4G,QACrBL,UAAWA,OAOnBS,oCAAiB,SAAA7G,IAAA,IAAAE,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACTN,EAAO,GADEI,EAAAE,KAAA,EAGPE,IACDC,IADC,mDAEDE,KAAK,SAAAC,GACFZ,EAAOY,EAAIZ,KAAKa,OAChBK,QAAQC,IAAInB,GACZO,EAAKQ,gBAAgBf,KAGxBgB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,KAXjB,wBAAAb,EAAAgB,SAAAtB,EAAAuB,WAgBjBN,gBAAkB,SAACf,GACfA,EAAOO,EAAKqG,qBAAqB5G,GACjCO,EAAKuB,SAAS,CAAC0C,UAAWxE,OAI9B4G,qBAAuB,SAACC,GAEpB,OAAOA,EAAIC,OAAO,SAAAC,GAAS,OAAIA,IAAcF,EAAIG,KAAK,SAAAC,GAAI,OADtCC,EACwDH,EAANE,EAD1CnE,SAAWoE,EAAEpE,OAAzB,IAAIoE,SAIxBC,cAAgB,SAACV,GACb,OAAOlG,EACFZ,MACA6E,UACA4C,UAAU,SAAAvC,GAAK,OAAIA,EAAM/B,SAAW2D,OAG7C9B,YAAc,SAAC6B,EAAwBV,GACnCvF,EAAKuB,SAAS,CACVuE,aAAc9F,EAAKZ,MAAM0G,YACzBG,yBACAV,oBAMRC,YAAc,WACV,IAAMsB,EAAW9G,EAAKZ,MAAM6G,uBACtBc,EAAa5E,OAAA6E,EAAA,EAAA7E,CAAOnC,EAAKZ,MAAM6E,WAC/BgD,EAAajH,EAAK4G,cAAcE,GACtCC,EAAcG,OAAOD,EAAY,GACjCjH,EAAKuB,SAAS,CACV0C,UAAW8C,EACXjB,aAAc9F,EAAKZ,MAAM0G,iBAIjCL,eAAiB,WACb,IAAM0B,EAAmBnH,EAAKZ,MAAM6G,uBAC9Bc,EAAa5E,OAAA6E,EAAA,EAAA7E,CAAOnC,EAAKZ,MAAM6E,WAC/BgD,EAAajH,EAAK4G,cAAcO,EAAiB5E,QACvDwE,EAAcG,OAAOD,EAAY,EAAGE,GACpCnH,EAAKuB,SAAS,CACV0C,UAAW8C,EACXlB,aAAc7F,EAAKZ,MAAMyG,YACzBC,aAAc9F,EAAKZ,MAAM0G,iBAKjCK,uDAAmB,SAAAiB,EAAMlB,GAAN,IAAAzG,EAAAwH,EAAA,OAAAvH,EAAAC,EAAAC,KAAA,SAAAyH,GAAA,cAAAA,EAAAvH,KAAAuH,EAAAtH,MAAA,UACVC,EAAKZ,MAAMyG,YADD,CAAAwB,EAAAtH,KAAA,eAAAsH,EAAAC,OAAA,oBAKX7H,EAAO,GACLwH,EAAajH,EAAK4G,cAAcV,KAElC/D,OAAOC,KAAKpC,EAAKZ,MAAM6E,UAAUgD,IAAa9C,OAAS,GAR5C,CAAAkD,EAAAtH,KAAA,QASXC,EAAKuB,SAAS,CAACW,aAAclC,EAAKZ,MAAM6E,UAAUgD,KATvCI,EAAAtH,KAAA,uBAAAsH,EAAAtH,KAAA,GAYLE,IACDC,IADC,8CAAAC,OACiD+F,EADjD,aAED9F,KAAK,SAAAC,GACFZ,EAAO,CACH8C,OAAQlC,EAAIZ,KAAK8C,OACjBmC,MAAOrE,EAAIZ,KAAKiF,MAChB6C,KAAMlH,EAAIZ,KAAK8H,KACfC,QAASnH,EAAIZ,KAAKgI,QAClBC,MAAOrH,EAAIZ,KAAKiI,MAChBC,SAAUtH,EAAIZ,KAAKkI,SACnBnF,OAAQnC,EAAIZ,KAAK+C,UAGxBpC,KAAK,kBAAMJ,EAAKuB,SAAS,CAACW,aAAczC,MACxCgB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,KA1BnB,iCAAA2G,EAAAxG,SAAAuG,EAAAtG,kJAxFfA,KAAKsF,kDAuHL,OACIpF,EAAArB,EAAAsB,cAAA,WACID,EAAArB,EAAAsB,cAAC2G,EAAD,MACA5G,EAAArB,EAAAsB,cAAC4G,EAAD,CAAWrH,gBAAiBM,KAAKN,kBACjCQ,EAAArB,EAAAsB,cAACkE,EAAD,CACIZ,YAAazD,KAAKyD,YAClBiB,YAAa1E,KAAK0E,YAClBpB,YAAatD,KAAKsD,YAClBH,UAAWnD,KAAK1B,MAAM6E,YAErBnD,KAAK1B,MAAMyG,YACV7E,EAAArB,EAAAsB,cAAC6G,EAAD,CACM5F,aAAcpB,KAAK1B,MAAM8C,aACzBqC,YAAazD,KAAKyD,YAClBH,YAAatD,KAAKsD,YAClBH,UAAWnD,KAAK1B,MAAM6E,UACtBT,iBAAkB1C,KAAK0C,iBACvBG,YAAa7C,KAAK6C,cACxB,KAEL7C,KAAK1B,MAAM0G,YACN9E,EAAArB,EAAAsB,cAACoE,EAAD,CACMjB,YAAatD,KAAKsD,YAClBoB,YAAa1E,KAAK0E,YAClBD,aAAczE,KAAK1B,MAAMmG,aACzBE,eAAgB3E,KAAK2E,iBAE3B,KAEL3E,KAAK1B,MAAM4G,QACNhF,EAAArB,EAAAsB,cAACyE,EAAD,CACM/B,YAAa7C,KAAK6C,YAClBgC,UAAW7E,KAAK1B,MAAMuG,YAC5B,aAvKJhE,oBCEEoG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxE,MACvB,2DCZNyE,IAASC,OAAOpH,EAAArB,EAAAsB,cAACoH,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtI,KAAK,SAAAuI,GACjCA,EAAaC","file":"static/js/main.b77da97e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './searchBar.css';\nimport Axios from 'axios';\n\n\n\nclass SearchBar extends Component {\n    state = {\n        movieTitle: ''\n    }\n\n    getMovieData = async () => {\n        const searchQuery = this.state.movieTitle\n        let data = {};\n        await Axios\n            .get(`https://www.omdbapi.com/?apikey=3c722a44&s=${searchQuery}`)\n            .then(res => {\n                data = res.data.Search;\n                this.props.renderMovieList(data)\n            })\n            .catch(err => console.log(err));\n    }\n\n    render() {\n        console.log(this.state.movieTitle)\n        return (\n                <div className=\"container\">\n                    <div className=\"wrapper\">\n                        <input className=\"searchInput\" type=\"text\" placeholder=\"Search A Movie...\" onChange={(e)=> this.setState({ movieTitle: e.currentTarget.value })}/>\n                        <button className=\"btn\" onClick={() => this.getMovieData()}>SEARCH</button>\n                        {/* <div className=\"filter\">\n                            FILTER\n                        </div> */}\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport './menuBar.css';\n\n\nclass MenuBar extends Component {\n  state = {  }\n  render() { \n    return ( \n      <React.Fragment>\n        <div className=\"container-menu\" id=\"sidebar\">\n          <div className=\"logo\">LOGO</div>\n          <div className=\"ul-contianer\">\n          <ul className=\"ulMenu\">\n            <li>HOME</li>\n            <li>FAVORITES</li>\n            <li>CONTACT</li>\n          </ul>\n          </div>\n        </div>\n      </React.Fragment>\n     );\n  }\n}\n \nexport default MenuBar;","import React, {Component} from 'react';\nimport './modal.css';\n\nclass Modal extends Component {\n\n    state = {};\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({\n                ...this.props.movieInModal\n            })\n        }, 500)\n    }\n\n    //render each movie filed and add an onchange event to each field\n    renderMovieInfo = () => {\n        let editedText = {}\n        console.log(this.props.movieInModal)\n        return Object\n            .keys(this.props.movieInModal)\n            .map(key => {\n                if (key === 'imdbID' || key === 'Poster') {\n                    return;\n                } else {\n                    editedText[key] = this.props.movieInModal[key];\n\n                    //hard coded and not rendered to text & cannot be edited\n                    editedText.imdbID = this.props.movieInModal.imdbID;\n                    editedText.Poster = this.props.movieInModal.Poster;\n\n                    return (\n                        <div key={key} className=\"movie-info\">\n                            <b\n                                style={{\n                                textTransform: 'uppercase'\n                            }}>{key}</b>: {this.state[key]\n                                ? this.state[key]\n                                : this.props.movieInModal[key]}\n                            <input\n                                type=\"text\"\n                                id=\"fields\"\n                                placeholder={`Edit ${key}`}\n                                onChange={(e) => this.cleanUpEditedText(e, editedText, key)}/>\n                        </div>\n                    )\n                };\n            });\n    };\n\n    //STARTING EDITED INFO VERIFYING SEQUENCE\n    cleanUpEditedText = (e, editedText, key) => {\n        if (key !== 'Poster' || key !== 'imdbID' || key !== 'Year') {\n            let verifiedText = e\n                .currentTarget\n                .value\n                .replace(/[^a-z0-9]/gmi, \" \")\n                .toLowerCase()\n                .split(' ')\n                .map((letter) => letter.charAt(0).toUpperCase() + letter.substring(1))\n                .join(' ');\n\n            editedText[key] = verifiedText || editedText[key];\n        };\n\n        this.setState((prevState) => ({\n            [key]: editedText[key],\n            ...prevState.state\n        }));\n    };\n\n    verifyEditedInfo = () => {\n        const cleanText = {\n            ...this.state\n        }\n\n        for (let value in cleanText) {\n            if (cleanText[value].match(/^\\s+$/)) {\n                this\n                    .props\n                    .toggleAlert('please dont leave empty fields.');\n                return;\n            };\n\n            if (value === 'Year') {\n                if (cleanText[value] > new Date().getFullYear() || cleanText[value] < 1920) {\n                    this\n                        .props\n                        .toggleAlert('Please provide a reasonable year.');\n                    return;\n                };\n\n                if (cleanText[value].match(/[a-zA-Z]/g)) {\n                    this\n                        .props\n                        .toggleAlert('Use numbers for the Year.');\n                    return;\n                };\n            };\n        };\n        this.findDuplicateTitle();\n    };\n\n    findDuplicateTitle() {\n        let tempMovieList = this.props.movieList;\n\n        for (let i = 0; i < tempMovieList.length; i++) {\n            if (this.state['imdbID'] !== tempMovieList[0]['imdbID'] && this.state['Title'] === tempMovieList[0]['Title']) {\n                this\n                    .props\n                    .toggleAlert('Title already exist, Choose another name.');\n                return;\n            }\n        }\n\n        this\n            .props\n            .togglePopUp(this.state, 'save');\n    }\n\n \n\n    render() {\n        const movie = this.props.movieInModal\n\n        return (\n            <div className=\"modal-div\">\n                <button className=\"exit-btn\" onClick={() => this.props.toggleModal()}>X</button>\n\n                <div className=\"content-div\">\n                    <div className=\"written-content\">\n                        <div>\n                            <b>IMDB ID</b>: {movie.imdbID}\n                        </div>\n                        {this.renderMovieInfo()}\n                    </div>\n\n                    <div className=\"img-content\">\n                        <img src={movie.Poster} alt={movie.Title} height=\"350\" width=\"250\"/>\n                    </div>\n                </div>\n\n                <div className=\"saveCancelBtn\">\n                    <button className=\"btn\" onClick={() => this.verifyEditedInfo()}>SAVE</button>\n                    <button className=\"btn btn-cancel\" onClick={() => this.props.toggleModal()}>CANCEL</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Modal;","import React from 'react';\nimport './singleMovie.css'\n\nexport default(props) => {\n    return (\n        <div className=\"movie-div\">\n            <div className=\"inner-div\">\n                <div className=\"img-div\">\n                {console.log(props.poster)}\n                    <img\n                        src={props.poster}\n                        alt={props.title}\n                        style={{\n                        width: '170px',\n                        maxHeight: '220px'\n                    }}/>\n                </div>\n\n                <div className=\"exit-btn-div\">\n                    <button className=\"close-btn\" onClick={() => props.togglePopUp(props.imdbID, \"delete\")}>X</button>\n                </div>\n\n                {/* <div className=\"add-btn-div\">\n                    <button className=\"add-btn\" onClick={() => props.toggleModal(props.imdbID)}>ADD</button>\n                </div> */}\n\n\n                <div className=\"edit-btn-div\">\n                    <button className=\"edit-btn\" onClick={() => props.toggleModal(props.imdbID)}>EDIT</button>\n                </div>\n\n         \n\n            </div>\n\n            <h5>{props.title}</h5>\n\n        </div>\n    );\n};\n","import React from 'react';\nimport SingleMovie from './singleMovie';\nimport './movieList.css'\n\nexport default(props) => {\n    \n    const renderMoviesList = () => {\n        return props\n            .movieList\n            .map(({Title, Poster, imdbID}) => {\n                return (<SingleMovie\n                    key={imdbID}\n                    togglePopUp={props.togglePopUp}\n                    toggleModal={props.toggleModal}\n                    imdbID={imdbID}\n                    title={Title}\n                    poster={Poster === 'N/A' ? '/resources/img/Blank.png': Poster}/>)\n            });\n    };\n\n    return (\n        <div className=\"movie-list \">\n            {renderMoviesList()}\n        </div>\n    );\n};\n","import React from 'react';\nimport MovieList from '../movies/MovieList';\nimport './home.css'\n\nexport default(props) => {\n    return (\n\n        <div className=\"home-container\">\n            <div className=\"opacity\">\n                <h1 className=\"home-headline\">Find A Movie</h1>\n                <MovieList\n                    toggleModal={props.toggleModal}\n                    movieList={props.movieList}\n                    togglePopUp={props.togglePopUp}\n                    fullMovieInfo={props.fullMovieInfo}/>\n            </div>\n        </div>\n    );\n};","import React from 'react';\nimport './popup.css'\n\nexport default(props) => {\n\n    const saveOrDelete = () => {\n        if (props.saveOrDelete === 'delete') {\n            props.deleteMovie();\n        }\n        if (props.saveOrDelete === 'save') {\n            props.saveEditedInfo();\n        }\n    };\n\n    return (\n        <div className=\"popUp-div\">\n            <div className=\"inner-popup-div\">\n                <p>Are you sure you want to\n                    <span>\n                        <b\n                            style={{\n                            fontWeight: '700'\n                        }}> {props.saveOrDelete} </b>\n                    </span>\n                    this movie?</p>\n                <div className=\"btn-div\">\n                    <button className=\"btn\" onClick={() => saveOrDelete()}>CONFIRM</button>\n                    <button className=\"btn btn-cancel\" onClick={() => props.togglePopUp()}>CANCEL</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport './popup.css'\n\nexport default(props) => {\n    return (\n        <div className=\"popUp-div\">\n            <div className=\"alert-header\">Alert!</div>\n            <div className=\"inner-popup-div alert-inner-div\">\n                <p>{props.alertType}</p>\n                <div className=\"btn-div\">\n                    <button className=\"btn alert-btn\" onClick={() => props.toggleAlert()}>OK</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, {Component} from 'react';\nimport Axios from 'axios';\nimport SearchBar from './search/SearchBar';\nimport MenuBar from './menuBar/MenuBar';\nimport Modal from './modal/Modal';\nimport Home from './home/Home';\nimport QuestionPopUp from './popUp/QuestionPopUp';\nimport AlertPopUp from './popUp/AlertPopUp';\nimport './App.css';\n\nclass App extends Component {\n\n    state = {\n        movieList: [],\n        isModalOpen: false,\n        isPopUpOpen: false,\n        movieInModal: {},\n        saveOrDeletePopUp: null,\n        isAlert: false,\n        deleteIdOrVerifiedInfo: '',\n        alertType: '',\n    }\n\n    //render movie list at startup\n    componentDidMount() {\n        this.fetchFirstList();\n    }\n\n    toggleModal = (movieID) => {\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        }, () => this.getFullMovieInfo(movieID));\n    };\n\n\n    toggleAlert = (alertType) => {\n        this.setState({\n            isAlert: !this.state.isAlert,\n            alertType: alertType\n        });\n        return;\n    };\n\n    //fetch first movie list AJAX\n\n    fetchFirstList = async() => {\n        let data = {};\n\n        await Axios\n            .get(`https://www.omdbapi.com/?apikey=3c722a44&s=thor`)\n            .then(res => {\n                data = res.data.Search;\n                console.log(data)\n                this.renderMovieList(data)\n\n            })\n            .catch(err => console.log(err));\n        }\n\n\n\n    renderMovieList = (data) => {\n        data = this.deleteDuplicatesImdb(data);\n        this.setState({movieList: data});\n    };\n\n    //delete duplicates from fetched movie list\n    deleteDuplicatesImdb = (arr) => {\n        const isEqual = (a, b) => a.imdbID === b.imdbID;\n        return arr.filter(candidate => candidate === arr.find(item => isEqual(item, candidate)))\n    };\n\n    getMovieIndex = (movieID) => {\n        return this\n            .state\n            .movieList\n            .findIndex(movie => movie.imdbID === movieID)\n    };\n\n    togglePopUp = (deleteIdOrVerifiedInfo, saveOrDelete) => {\n        this.setState({\n            isPopUpOpen: !this.state.isPopUpOpen,\n            deleteIdOrVerifiedInfo,\n            saveOrDelete\n        });\n        return;\n    }\n\n    //delete movies from list - User Choice\n    deleteMovie = () => {\n        const deleteId = this.state.deleteIdOrVerifiedInfo;\n        const movieListCopy = [...this.state.movieList];\n        const movieIndex = this.getMovieIndex(deleteId)\n        movieListCopy.splice(movieIndex, 1);\n        this.setState({\n            movieList: movieListCopy,\n            isPopUpOpen: !this.state.isPopUpOpen\n        });\n    };\n\n    saveEditedInfo = () => {\n        const approvedTextInfo = this.state.deleteIdOrVerifiedInfo;\n        const movieListCopy = [...this.state.movieList];\n        const movieIndex = this.getMovieIndex(approvedTextInfo.imdbID)\n        movieListCopy.splice(movieIndex, 1, approvedTextInfo);\n        this.setState({\n            movieList: movieListCopy,\n            isModalOpen: !this.state.isModalOpen,\n            isPopUpOpen: !this.state.isPopUpOpen,\n        });\n    }\n\n    //get full movie info to modal\n    getFullMovieInfo = async(movieID) => {\n        if (!this.state.isModalOpen) {\n            return;\n        }\n\n        let data = {};\n        const movieIndex = this.getMovieIndex(movieID)\n\n        if (Object.keys(this.state.movieList[movieIndex]).length > 5) {\n            this.setState({movieInModal: this.state.movieList[movieIndex]});\n\n        } else {\n            await Axios\n                .get(`https://www.omdbapi.com/?apikey=3c722a44&i=${movieID}&Runtime`)\n                .then(res => {\n                    data = {\n                        imdbID: res.data.imdbID,\n                        Title: res.data.Title,\n                        Year: res.data.Year,\n                        RunTime: res.data.Runtime,\n                        Genre: res.data.Genre,\n                        Director: res.data.Director,\n                        Poster: res.data.Poster\n                    }\n                })\n                .then(() => this.setState({movieInModal: data}))\n                .catch(err => console.log(err));\n        };\n    };\n\n    render() {\n        return (\n            <div>\n                <MenuBar/>\n                <SearchBar renderMovieList={this.renderMovieList}/>\n                <Home\n                    toggleModal={this.toggleModal}\n                    deleteMovie={this.deleteMovie}\n                    togglePopUp={this.togglePopUp}\n                    movieList={this.state.movieList}/> \n                    \n                    {this.state.isModalOpen\n                    ? <Modal\n                            movieInModal={this.state.movieInModal}\n                            toggleModal={this.toggleModal}\n                            togglePopUp={this.togglePopUp}\n                            movieList={this.state.movieList}\n                            verifyEditedInfo={this.verifyEditedInfo}\n                            toggleAlert={this.toggleAlert}/>\n                    : null}\n\n                {this.state.isPopUpOpen\n                    ? <QuestionPopUp\n                            togglePopUp={this.togglePopUp}\n                            deleteMovie={this.deleteMovie}\n                            saveOrDelete={this.state.saveOrDelete}\n                            saveEditedInfo={this.saveEditedInfo}/>\n\n                    : null}\n\n                {this.state.isAlert\n                    ? <AlertPopUp \n                            toggleAlert={this.toggleAlert} \n                            alertType={this.state.alertType}/>\n                    : null}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}